{
  "id": "e2026638-10e3-44b5-962f-dee43712ce09",
  "chunk_ix": 1,
  "created_at": "2025-08-10T15:53:06",
  "source": "web",
  "tags": [
    "memory"
  ],
  "content": "tags&quot;: [&quot;rain_garden&quot;, &quot;marketing&quot;, &quot;housing&quot;],\r\n&quot;summary&quot;: &quot;Short safe abstract...&quot;,\r\n&quot;chunk_urls&quot;: [&quot;chunks/&lt;NONCE&gt;/53ee4...-0.json&quot;]\r\n}]\r\n}\r\n\r\nChunk (~2 KB text):\r\n\r\n{\r\n&quot;id&quot;: &quot;53ee4...dbb&quot;,\r\n&quot;chunk_ix&quot;: 0,\r\n&quot;created_at&quot;: &quot;2025-08-09T14:54:00Z&quot;,\r\n&quot;source&quot;: &quot;chatgpt&quot;,\r\n&quot;tags&quot;: [&quot;rain_garden&quot;],\r\n&quot;content&quot;: &quot;&lt;redacted/plain text&gt;&quot;\r\n}\r\n\r\n4) Node Security Posture\r\n• Public mirror contains redacted, approved content only (public flag or tag inference).\r\n• Nonce‑protected paths and filenames (rotate daily or on demand).\r\n• Keep old nonces pruned; keep a maximum of 1–2 previous nonces for rollback.\r\n• Writes require a private key to /memory/save (never exposed in mirror).\r\n5) Directory / Global Index (MVP)\r\nThe index is a single JSON file that lists participating nodes and the entry URLs they expose.\r\nExample:\r\n\r\n{\r\n&quot;version&quot;: &quot;1&quot;,\r\n\r\n&quot;generated_at&quot;: &quot;2025-08-10T23:59:00Z&quot;,\r\n&quot;nodes&quot;: [{\r\n&quot;name&quot;: &quot;Michael / NSG&quot;,\r\n&quot;owner&quot;: &quot;Michael&quot;,\r\n&quot;region&quot;: &quot;US&quot;,\r\n&quot;entry_urls&quot;: [\r\n&quot;https://raw.githubusercontent.com/HoffmanM361/memory-\r\nmirror/main/catalog/&lt;NONCE&gt;/search_map_&lt;NONCE&gt;.json&quot;\r\n],\r\n&quot;tags&quot;: [&quot;housing&quot;, &quot;rain_garden&quot;, &quot;policy&quot;]\r\n}]\r\n}\r\n\r\nThis can live in a public Git repo (e.g., `distributed-memory-index/index.json`). AIs fetch the\r\nindex, pick relevant nodes by tags or owner, then follow entry URLs.\r\n6) Query Flow (AI)\r\n1) Fetch global index JSON.\r\n2) Filter nodes by tags/owner/region/date.\r\n3) For each candidate node, open its search map URL (entrypoint).\r\n4) Load relevant shard(s) from the tokens list.\r\n5) Follow chunk_urls to fetch content; rank and summarize.\r\n6) Return small, dated options to the us"
}