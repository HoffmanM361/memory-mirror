{
  "id": "d15a7afa-75a8-44ba-8f76-ac495c18a8d0",
  "chunk_ix": 3,
  "created_at": "2025-08-10T11:15:41",
  "source": "web",
  "tags": [
    "memory",
    "system"
  ],
  "content": "       \r\n        return redirect(url_for('conversations.view_conversations'))\r\n        \r\n    except MySQLError as e:\r\n        write_log(f\"ERROR: save_conversation - MySQL error: {e}\")\r\n        flash('Database error occurred', 'error')\r\n        if conn:\r\n            conn.rollback()\r\n        return render_template('save_conversation.html')\r\n        \r\n    except Exception as e:\r\n        write_log(f\"ERROR: save_conversation - Unexpected error: {e}\")\r\n        write_log(f\"ERROR: save_conversation - Traceback: {traceback.format_exc()}\")\r\n        flash('An error occurred while saving', 'error')\r\n        if conn:\r\n            conn.rollback()\r\n        return render_template('save_conversation.html')\r\n        \r\n    finally:\r\n        if cursor:\r\n            cursor.close()\r\n        if conn:\r\n            conn.close()\r\n\r\n@conversation_bp.route('/view')\r\ndef view_conversations():\r\n    \"\"\"Browse saved conversations\"\"\"\r\n    conn = None\r\n    cursor = None\r\n    \r\n    try:\r\n        # Get search parameters\r\n        search = request.args.get('search', '').strip()\r\n        source_filter = request.args.get('source', '').strip()\r\n        page = int(request.args.get('page', 1))\r\n        per_page = 20\r\n        offset = (page - 1) * per_page\r\n        \r\n        conn = get_db_connection()\r\n        if not conn:\r\n            flash('Database connection failed', 'error')\r\n            return render_template('view_conversations.html', conversations=[])\r\n        \r\n        cursor = conn.cursor(dictionary=True)\r\n        \r\n        # Build query\r\n        where_conditions = []\r\n        params = []\r\n        \r\n        if search:\r\n            where_conditions.append(\"(content LIKE %s OR summary LIKE %s)\")\r\n            params.extend([f'%{search}%', f'%{search}%'])\r\n        \r\n        if source_filter:\r\n            where_conditions.append(\"source = %s\")\r\n            params.append(source_filter)\r\n        \r\n        where_clause = \" AND \".join(where_conditions) if where_conditions else \"1=1\"\r\n        \r\n        # Get "
}